// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    // directUrl = env("DIRECT_URL")
}

model User {
    id            String          @id @default(cuid())
    name          String?
    email         String          @unique
    emailVerified DateTime?
    password      String?
    image         String?
    accounts      Account[]
    sessions      Session[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Account {
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@id([provider, providerAccountId])
}

model Session {
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationToken {
    identifier String
    token      String
    expires    DateTime

    @@id([identifier, token])
}

enum QuoteStatus {
    PENDING
    ACCEPTED
    REJECTED
    EXPIRED
}

enum invoiceStatus {
    PENDING
    PAID
    CANCELED
}

model Seller {
    id        String    @id @default(uuid())
    name      String
    address   String
    phone     String?
    email     String?
    siret     String?   @unique
    vatNumber String?
    logo      String?
    // userId    String
    //   user      User      @relation(fields: [userId], references: [id])
    invoices  Invoice[]
    quotes    Quote[]
}

model Customer {
    id       String    @id @default(uuid())
    name     String
    address  String
    siret    String?   @unique
    phone    String?
    email    String?
    // userId   String
    // user     User      @relation(fields: [userId], references: [id])
    invoices Invoice[]
    quotes   Quote[]
}

model Invoice {
    id             String        @id @default(uuid())
    number         String
    date           DateTime
    seller         Seller        @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId       String
    customer       Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
    customerId     String
    items          Item[]
    subtotal       Float //prix ht
    vatRate        Float? //taux de tva
    vatAmount      Float? //montant de tva
    total          Float? //prix ttc
    paymentTerms   String?       @db.Text
    paymentDetails String?       @db.Text
    legalMentions  String?       @db.Text
    status         invoiceStatus @default(PENDING)
    // user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId         String
    viewd          Boolean?      @default(false)

    //settings
    vatActivated Boolean? @default(true) //tva activée
    vatPerItem   Boolean? @default(false) //tva par article
    devise       String?  @default("€") //devise
    showQuantity Boolean? @default(true) //afficher la quantité

    paymentDate DateTime?
    dueDate     DateTime?
    createdAt   DateTime  @default(now())
    updatedAt   DateTime  @updatedAt
}

model Quote {
    id         String      @id @default(uuid())
    number     String
    date       DateTime
    validUntil DateTime
    seller     Seller      @relation(fields: [sellerId], references: [id], onDelete: Cascade)
    sellerId   String
    customer   Customer    @relation(fields: [customerId], references: [id], onDelete: Cascade)
    customerId String
    items      QuoteItem[]
    subtotal   Float
    vatRate    Float?
    vatAmount  Float?
    total      Float?
    terms      String?     @db.Text
    notes      String?     @db.Text
    status     QuoteStatus @default(PENDING)
    comment    String?     @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Item {
    id          String  @id @default(uuid())
    name        String
    description String
    quantity    Int?
    unitPrice   Float
    totalPrice  Float
    totalVat    Float?
    vatRate     Float?
    invoice     Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
    invoiceId   String
}

model QuoteItem {
    id          String @id @default(uuid())
    name        String
    description String
    quantity    Int?
    unitPrice   Float
    totalPrice  Float
    totalVat    Float?
    vatRate     Float?
    quote       Quote  @relation(fields: [quoteId], references: [id], onDelete: Cascade)
    quoteId     String
}
